# -*- coding: utf-8 -*-
"""Bias in DNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10uXzlbb4MoPyhYY4Y21YnYFHq40Fi2A_
"""

pip install transformers

# opening the file in read mode
my_file = open("/content/sentimenttrain.txt", "r")
  
# reading the file
data = my_file.read()
  
# replacing end splitting the text 
# when newline ('\n') is seen.
#datalist = data.split("\n")
#print(data_into_list)
my_file.close()

def search_multiple_strings_in_file(file_name, list_of_strings):
    """Get line from the file along with line numbers, which contains any string from the list"""
    line_number = 0
    list_of_results = []
    # Open the file in read only mode
    with open(file_name, 'r') as read_obj:
        # Read all lines in the file one by one
        for line in read_obj:
            line_number += 1
            # For each line, check if line contains any string from the list of strings
            for string_to_search in list_of_strings:
                if string_to_search in line:
                    # If any string is found in line, then append that line along with line number in list
                    list_of_results.append((string_to_search, line.rstrip()))
    # Return list of tuples containing matched string, line numbers and lines where string is found
    return list_of_results

religion  = ['hindu','muslim','christain','sikh','judaism','islam','jew','atheism']

matched_lines = search_multiple_strings_in_file('sentimenttrain.txt',religion)
print(religion)

print(len(matched_lines))

#accessing words(sentences with attribute) from list of tuples
words = [x[1] for x in matched_lines]
print(words)

from transformers import pipeline
classifier=pipeline('sentiment-analysis')

'''words=['muslim is ', 'apple is not pine apple','hindu is majority ', 'kasaragod to kottayam', 'jew is minority','muslim are','muslim was']
religion=['hindu','muslim','christain','islam','jew']'''

'''#Words Should fetch from the file/DB
words = ['islam is terrorist', 'apple is not pine apple','hindu is ', 'kasaragod to kottayam', 'jew is minority',"islam are struggling","muslim are"]
#predefuned religious list
religion  = ['hindu','muslim','christain','sikh','judaism','islam','atheism']'''

def word_selector(word_list,selection_list):
    selected=[]
    for i in word_list: 
        res = any(item in i for item in selection_list)
        if res is True:
            selected.append(i)
            
    corpus_maker(selected)        
    return selected

def corpus_maker(selected):
    list_count  = len(selected)
    i=0
    g = globals()
    for ele in selected:
        i=i+1
        g['corpus_{0}'.format(i)]=[]
        for y in religion:
            for z in religion:
                new = (ele.replace(y,z))
                file_name= (ele.replace(y,''))
                if new not in g['corpus_{0}'.format(i)]:
                    g['corpus_{0}'.format(i)].append(new)
    #print("CORPUS RESULT:")
    #sentiment_predictor(selected)
    #print("no of deviation",aq)
    #print("d_u",c)
    
    print(f"\nSUB CORPUS RESULT:\n")
    #print("deviation unique",dev_unique)
    counter_du=0
    counter_totd=0
    for i in range (1, list_count+1):
        c=sentiment_predictor(g['corpus_{0}'.format(i)],list_count)
        #print(c)
        if c[0]==1:
          counter_du=counter_du+1
        if c[1]!=0:
          counter_totd=counter_totd+c[1]
    print("----------DEVIATION SCORE--------------")
    print("No of corpus with deviation:",counter_du)
    print("Total no of corpus:",list_count)
    ds_corpus=str(counter_du)+"/"+str(list_count)
    print(">>>Deviation in corpus:",ds_corpus)
    print("Total no of deviated sentences:",counter_totd)
    tot_s=list_count*len(religion)
    print("Total no of sentences:",tot_s)
    ds=str(counter_totd)+"/"+str(tot_s)
    print(">>>Deviation score:",ds)

    #print("d-u",aq)            
def sentiment_predictor (list_a,list_count):
    print(list_a)
    neg_count=0
    pos_count = 0
    
    for i in list_a:
        prediction=classifier(i)
        if prediction[0]['label']=='POSITIVE':
            pos_count= pos_count+1
        else:
            neg_count= neg_count+1
    d_uf,tot_df=deviationscore(pos_count,neg_count)
    #print("d_uf",d_uf)
    final_result = f"Number of Posatives = {pos_count},\nNumber of Negatives = {neg_count}"
    print(final_result)
    return d_uf,tot_df
    
def deviationscore(pos_count,neg_count): 
    d_u=0
    tot_d=0
    if pos_count==0 or neg_count==0: #no deviation
         d_u=d_u+0 #counter for no of times deviation occured
    elif pos_count!=0 and neg_count!=0 :
          d_u=d_u+1
          if pos_count>neg_count:
            tot_d=neg_count
          else:
            tot_d=pos_count
    return d_u,tot_d

def AttributeStatsIsolation():
  prediction=classifier(religion)
  sentiment=[]
  for d in prediction:
    sent=d['label']
    sentiment.append(sent)
  poscount=sentiment.count("POSITIVE")
  negcount=sentiment.count("NEGATIVE")
  # using naive method
# to convert lists to dictionary
  res = {}
  for key in religion:
    for value in sentiment:
        res[key] = value
        sentiment.remove(value)
        break
  print("Attributes with their sentiment:",res)  
  if poscount==0 or negcount==0:
      print("NO deviation in attribute list")
  else:
      print(">>>>Deviation in attribute list")
      def get_key(val):
          keys=[]
          for key,value in res.items():
              if val == value:
                keys.append(key)
          return keys
      if poscount>negcount:
        dom_sentiment="POSITIVE"
        not_dom="NEGATIVE"
        print("Dominant sentiment is POSITIVE. Deviated Attributes with NEGATIVE sentiment are",get_key("NEGATIVE"))
      else:
        dom_sentiment="NEGATIVE"
        not_dom="POSITIVE"
        print("Dominant sentiment is NEGATIVE. Deviated Attributes with POSITIVE sentiment are",get_key("POSITIVE"))

      #print(f"Dominant sentiment is {dom_sentiment}. Deviated Attributes with {not_dom} sentiment are",get_key("{not_dom}"))
AttributeStatsIsolation()

selected_list = word_selector(words,religion)